name: üê∂ Run Robowoofy

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  run-woofy:
    if: startsWith(github.event.comment.body, '/run')
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Acknowledge user comment with an emoji
      - name: üêæ React to comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ github.event.comment.id }}
          reactions: "eyes"

      # 2Ô∏è‚É£ Parse /run command parameters
      - name: üßæ Parse command
        id: parse
        run: |
          comment="${{ github.event.comment.body }}"
          echo "Comment: $comment"

          FN="main"
          NETWORK="mainnet"
          SEND="false"

          for arg in $comment; do
            case "$arg" in
              fn=*) FN="${arg#fn=}" ;;
              network=*) NETWORK="${arg#network=}" ;;
              send=*) SEND="${arg#send=}" ;;
            esac
          done

          echo "fn=$FN" >> $GITHUB_OUTPUT
          echo "network=$NETWORK" >> $GITHUB_OUTPUT
          echo "send=$SEND" >> $GITHUB_OUTPUT

      # 3Ô∏è‚É£ Checkout repo
      - name: üß∞ Checkout code
        uses: actions/checkout@v4

      # 4Ô∏è‚É£ Build Docker image
      - name: üê≥ Build Docker image
        run: docker build -t robowoofy-ng .

      # 5Ô∏è‚É£ Create .env file for secrets
      - name: üîê Create .env file
        run: |
          echo "ROBOWOOFY_SIGNER_PK=${{ secrets.ROBOWOOFY_SIGNER_PK }}" > .env
          echo "ETHERSCAN_TOKEN=${{ secrets.ETHERSCAN_TOKEN }}" >> .env
          echo "TG_BOT_ACCESS_TOKEN=${{ secrets.TG_BOT_ACCESS_TOKEN }}" >> .env
          echo "TG_GROUP_CHAT_ID=${{ secrets.TG_GROUP_CHAT_ID }}" >> .env
          echo "ETH_RPC_URL=${{ secrets.ETH_RPC_URL }}" >> .env

      # 6Ô∏è‚É£ Run Robowoofy inside Docker
      - name: üß™ Run Robowoofy
        run: |
          echo "Running function: ${{ steps.parse.outputs.fn }}"
          echo "Network: ${{ steps.parse.outputs.network }}"
          echo "Send flag: ${{ steps.parse.outputs.send }}"

          docker run --rm \
            --env-file .env \
            -v ${{ github.workspace }}:/robowoofy-ng \
            robowoofy-ng \
            bash -c "
              brownie networks import ./network-config.yaml && \
              brownie run src/woof.py ${{ steps.parse.outputs.fn }} \
                --network ${{ steps.parse.outputs.network }}
            "

      # 7Ô∏è‚É£ Cleanup sensitive file
      - name: üßπ Cleanup .env
        if: always()
        run: rm -f .env